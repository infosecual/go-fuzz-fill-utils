package reportfuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils -chain github.com/google/syzkaller/pkg/report".

import (
	"testing"

	"github.com/google/syzkaller/pkg/mgrconfig"
	"github.com/google/syzkaller/pkg/report"
	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
)

func Fuzz_NewReporter_Chain(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg)
		if cfg == nil {
			return
		}

		target, err := report.NewReporter(cfg)
		if err != nil {
			return
		}

		steps := []fuzzer.Step{
			{
				Name: "Fuzz_Reporter_ContainsCrash",
				Func: func(output []byte) bool {
					return target.ContainsCrash(output)
				},
			},
			{
				Name: "Fuzz_Reporter_Parse",
				Func: func(output []byte) *report.Report {
					return target.Parse(output)
				},
			},
			{
				Name: "Fuzz_Reporter_ParseFrom",
				Func: func(output []byte, minReportPos int) *report.Report {
					return target.ParseFrom(output, minReportPos)
				},
			},
			{
				Name: "Fuzz_Reporter_Symbolize",
				Func: func(rep *report.Report) {
					target.Symbolize(rep)
				},
			},
		}

		// Execute a specific chain of steps, with the count, sequence and arguments controlled by fz.Chain
		fz.Chain(steps)
	})
}
